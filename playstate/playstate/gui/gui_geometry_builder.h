#pragma once

#include "../rendering/render_system.h"
#include "../math/rect.h"
#include "../memory/memory_pool.h"

namespace playstate
{
	struct GuiGeometryData
	{
		Vector2 Position;
		Vector2 TexCoord;
		Color Color;
	};

	static const VertexDeclaration GuiGeometryDataVertexDeclaration = {
		{ 
			{ 0, sizeof(Vector2), 2, GL_FLOAT, false },
			{ 1, sizeof(Vector2), 2, GL_FLOAT, false },
			{ 2, sizeof(Color), 4, GL_FLOAT, false }, 
			0 
		}
	};
	static VertexDeclarationArrayObjectFactory GuiGeometryDataVAOFactory(GuiGeometryDataVertexDeclaration);

	//
	// The geometry builder is used to append geometry generated by the user interface.
	class GuiGeometryBuilder
	{
	public:
		GuiGeometryBuilder(RenderSystem& renderSystem);
		~GuiGeometryBuilder();

		void AddQuad(const Vector2& position, const Vector2& size);
		void AddQuad(const Vector2& position, const Vector2& size, const Color& color);
		void AddGradientQuad(const Vector2& position, const Vector2& size, const Color& topColor, const Color& bottomColor);
		void AddGradientQuad(const Vector2& position, const Vector2& size, const Color& topLeftColor, const Color& topRightColor,
			const Color& bottomLeftColor, const Color& bottomRightColor);

		//
		// @return The build vertex buffer
		VertexBuffer* GetVertexBuffer();

	private:
		RenderSystem& mRenderSystem;
		VertexBuffer* mVertexBuffer;
		GuiGeometryData* mData;
		MemoryPool<GuiGeometryData> mMemoryPool;

	};

}
